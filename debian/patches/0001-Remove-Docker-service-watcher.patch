From: Neil Williams <neil@reddit.com>
Date: Fri, 20 May 2016 08:49:45 -0700
Subject: Remove Docker service watcher

We don't need it and it saves us a dependency.
---
 README.md                                       |  11 ---
 lib/synapse/service_watcher/docker.rb           |  97 ------------------
 spec/lib/synapse/service_watcher_docker_spec.rb | 126 ------------------------
 synapse.gemspec                                 |   1 -
 4 files changed, 235 deletions(-)
 delete mode 100644 lib/synapse/service_watcher/docker.rb
 delete mode 100644 spec/lib/synapse/service_watcher_docker_spec.rb

diff --git a/README.md b/README.md
index 75d3d03..8651366 100644
--- a/README.md
+++ b/README.md
@@ -180,17 +180,6 @@ If the `method` is `serverset` then we expect to find Finagle ServerSet
 (also used by [Aurora](https://github.com/apache/aurora/blob/master/docs/user-guide.md#service-discovery)) registrations with a `serviceEndpoint` and optionally one or more `additionalEndpoints`.
 The Synapse `name` will be automatically deduced from `shard` if present.
 
-##### Docker #####
-
-This watcher retrieves a list of [docker](http://www.docker.io/) containers via docker's [HTTP API](http://docs.docker.io/en/latest/reference/api/docker_remote_api/).
-It takes the following options:
-
-* `method`: docker
-* `servers`: a list of servers running docker as a daemon. Format is `{"name":"...", "host": "..."[, port: 4243]}`
-* `image_name`: find containers running this image
-* `container_port`: find containers forwarding this port
-* `check_interval`: how often to poll the docker API on each server. Default is 15s.
-
 ##### AWS EC2 tags #####
 
 This watcher retrieves a list of Amazon EC2 instances that have a tag
diff --git a/lib/synapse/service_watcher/docker.rb b/lib/synapse/service_watcher/docker.rb
deleted file mode 100644
index 1cbefc5..0000000
--- a/lib/synapse/service_watcher/docker.rb
+++ /dev/null
@@ -1,97 +0,0 @@
-require "synapse/service_watcher/base"
-require 'docker'
-
-class Synapse::ServiceWatcher
-  class DockerWatcher < BaseWatcher
-    def start
-      @check_interval = @discovery['check_interval'] || 15.0
-      @watcher = Thread.new do
-        watch
-      end
-    end
-
-    private
-    def validate_discovery_opts
-      raise ArgumentError, "invalid discovery method #{@discovery['method']}" \
-        unless @discovery['method'] == 'docker'
-      raise ArgumentError, "a non-empty list of servers is required" \
-        if @discovery['servers'].nil? or @discovery['servers'].empty?
-      raise ArgumentError, "non-empty image_name required" \
-        if @discovery['image_name'].nil? or @discovery['image_name'].empty?
-      raise ArgumentError, "container_port required" \
-        if @discovery['container_port'].nil?
-    end
-
-    def watch
-      until @should_exit
-        begin
-          start = Time.now
-          set_backends(containers)
-          sleep_until_next_check(start)
-        rescue Exception => e
-          log.warn "synapse: error in watcher thread: #{e.inspect}"
-          log.warn e.backtrace
-        end
-      end
-
-      log.info "synapse: docker watcher exited successfully"
-    end
-
-    def sleep_until_next_check(start_time)
-      sleep_time = @check_interval - (Time.now - start_time)
-      if sleep_time > 0.0
-        sleep(sleep_time)
-      end
-    end
-
-    def rewrite_container_ports(ports)
-      pairs = []
-      if ports.is_a?(String)
-        # "Ports" comes through (as of 0.6.5) as a string like "0.0.0.0:49153->6379/tcp, 0.0.0.0:49153->6379/tcp"
-        # Convert string to a map of container port to host port: {"7000"->"49158", "6379": "49159"}
-        pairs = ports.split(", ").collect do |v|
-          pair = v.split('->')
-          [ pair[1].rpartition("/").first, pair[0].rpartition(":").last ]
-        end
-      elsif ports.is_a?(Array)
-        # New style API, ports is an array of hashes, with numeric values (or nil if no ports forwarded)
-        pairs = ports.collect do |v|
-          [v['PrivatePort'].to_s, v['PublicPort'].to_s]
-        end
-      end
-      Hash[pairs]
-    end
-
-    def containers
-      backends = @discovery['servers'].map do |server|
-        Docker.url = "http://#{server['host']}:#{server['port'] || 4243}"
-        begin
-          cnts = Docker::Util.parse_json(Docker.connection.get('/containers/json', {}))
-        rescue => e
-          log.warn "synapse: error polling docker host #{Docker.url}: #{e.inspect}"
-          next []
-        end
-        cnts.each do |cnt|
-          cnt['Ports'] = rewrite_container_ports cnt['Ports']
-        end
-        # Discover containers that match the image/port we're interested in and have the port mapped to the host
-        cnts = cnts.find_all do |cnt|
-          cnt["Image"].rpartition(":").first == @discovery["image_name"] \
-            and cnt["Ports"].has_key?(@discovery["container_port"].to_s()) \
-            and cnt["Ports"][@discovery["container_port"].to_s()].length > 0
-        end
-        cnts.map do |cnt|
-          {
-            'name' => server['name'],
-            'host' => server['host'],
-            'port' => cnt["Ports"][@discovery["container_port"].to_s()]
-          }
-        end
-      end
-      backends.flatten
-    rescue => e
-      log.warn "synapse: error while polling for containers: #{e.inspect}"
-      []
-    end
-  end
-end
diff --git a/spec/lib/synapse/service_watcher_docker_spec.rb b/spec/lib/synapse/service_watcher_docker_spec.rb
deleted file mode 100644
index 494a32b..0000000
--- a/spec/lib/synapse/service_watcher_docker_spec.rb
+++ /dev/null
@@ -1,126 +0,0 @@
-require 'spec_helper'
-require 'synapse/service_watcher/docker'
-
-class Synapse::ServiceWatcher::DockerWatcher
-  attr_reader :check_interval, :watcher, :synapse
-  attr_accessor :default_servers
-end
-
-describe Synapse::ServiceWatcher::DockerWatcher do
-  let(:mocksynapse) { double() }
-  subject { Synapse::ServiceWatcher::DockerWatcher.new(testargs, mocksynapse) }
-  let(:testargs) { { 'name' => 'foo', 'discovery' => { 'method' => 'docker', 'servers' => [{'host' => 'server1.local', 'name' => 'mainserver'}], 'image_name' => 'mycool/image', 'container_port' => 6379 }, 'haproxy' => {} }}
-  before(:each) do
-    allow(subject.log).to receive(:warn)
-    allow(subject.log).to receive(:info)
-  end
-
-  def add_arg(name, value)
-    args = testargs.clone
-    args['discovery'][name] = value
-    args
-  end
-
-  context "can construct normally" do
-    it('can at least construct') { expect { subject }.not_to raise_error }
-  end
-
-  context "normal tests" do
-    it('starts a watcher thread') do
-      watcher_mock = double()
-      expect(Thread).to receive(:new).and_return(watcher_mock)
-      subject.start
-      expect(subject.watcher).to equal(watcher_mock)
-    end
-    it('sets default check interval') do
-      expect(Thread).to receive(:new).and_return(double)
-      subject.start
-      expect(subject.check_interval).to eq(15.0)
-    end
-  end
-
-  context "watch tests" do
-    before(:each) do
-      expect(subject).to receive(:sleep_until_next_check) do |arg|
-        subject.instance_variable_set('@should_exit', true)
-      end
-    end
-    it('has a happy first run path, configuring backends') do
-      expect(subject).to receive(:containers).and_return(['container1'])
-      expect(subject).to receive(:set_backends).with(['container1'])
-      subject.send(:watch)
-    end
-  end
-  context "watch eats exceptions" do
-    it "blows up when finding containers" do
-      expect(subject).to receive(:containers) do |arg|
-        subject.instance_variable_set('@should_exit', true)
-        raise('throw exception inside watch')
-      end
-      expect { subject.send(:watch) }.not_to raise_error
-    end
-  end
-
-  context "rewrite_container_ports tests" do
-    it 'doesnt break if Ports => nil' do
-        subject.send(:rewrite_container_ports, nil)
-    end
-    it 'works for old style port mappings' do
-      expect(subject.send(:rewrite_container_ports, "0.0.0.0:49153->6379/tcp, 0.0.0.0:49154->6390/tcp")).to \
-        eql({'6379' => '49153', '6390' => '49154'})
-    end
-    it 'works for new style port mappings' do
-      expect(subject.send(:rewrite_container_ports, [{'PrivatePort' => 6379, 'PublicPort' => 49153}, {'PublicPort' => 49154, 'PrivatePort' => 6390}])).to \
-        eql({'6379' => '49153', '6390' => '49154'})
-    end
-  end
-
-  context "container discovery tests" do
-    before(:each) do
-      getter = double()
-      expect(getter).to receive(:get)
-      expect(Docker).to receive(:connection).and_return(getter)
-    end
-
-    it('has a sane uri') { subject.send(:containers); expect(Docker.url).to eql('http://server1.local:4243') }
-
-    context 'old style port mappings' do
-      let(:docker_data) { [{"Ports" => "0.0.0.0:49153->6379/tcp, 0.0.0.0:49154->6390/tcp", "Image" => "mycool/image:tagname"}] }
-      context 'works for one container' do
-        it do
-          expect(Docker::Util).to receive(:parse_json).and_return(docker_data)
-          expect(subject.send(:containers)).to eql([{"name"=>"mainserver", "host"=>"server1.local", "port"=>"49153"}])
-         end
-      end
-      context 'works for multiple containers' do
-        let(:docker_data) { [{"Ports" => "0.0.0.0:49153->6379/tcp, 0.0.0.0:49154->6390/tcp", "Image" => "mycool/image:tagname"}, {"Ports" => "0.0.0.0:49155->6379/tcp", "Image" => "mycool/image:tagname"}] }
-        it do
-          expect(Docker::Util).to receive(:parse_json).and_return(docker_data)
-          expect(subject.send(:containers)).to eql([{"name"=>"mainserver", "host"=>"server1.local", "port"=>"49153"},{"name"=>"mainserver", "host"=>"server1.local", "port"=>"49155"}])
-        end
-      end
-    end
-
-    context 'new style port mappings' do
-      let(:docker_data) { [{"Ports" => [{'PrivatePort' => 6379, 'PublicPort' => 49153}, {'PublicPort' => 49154, 'PrivatePort' => 6390}], "Image" => "mycool/image:tagname"}] }
-      it do
-        expect(Docker::Util).to receive(:parse_json).and_return(docker_data)
-        expect(subject.send(:containers)).to eql([{"name"=>"mainserver", "host"=>"server1.local", "port"=>"49153"}])
-      end
-
-      it 'filters out containers with unmapped ports' do
-        test_docker_data = docker_data + [{"Ports" => [{'PrivatePort' => 6379}], "Image" => "mycool/image:unmapped"}]
-        expect(Docker::Util).to receive(:parse_json).and_return(test_docker_data)
-        expect(subject.send(:containers)).to eql([{"name"=>"mainserver", "host"=>"server1.local", "port"=>"49153"}])
-      end
-    end
-
-    context 'filters out wrong images' do
-      let(:docker_data) { [{"Ports" => "0.0.0.0:49153->6379/tcp, 0.0.0.0:49154->6390/tcp", "Image" => "mycool/image:tagname"}, {"Ports" => "0.0.0.0:49155->6379/tcp", "Image" => "wrong/image:tagname"}] }
-      it do
-        expect(Docker::Util).to receive(:parse_json).and_return(docker_data)
-        expect(subject.send(:containers)).to eql([{"name"=>"mainserver", "host"=>"server1.local", "port"=>"49153"}])
-      end
-    end
-  end
-end
diff --git a/synapse.gemspec b/synapse.gemspec
index a573492..d7aff8d 100644
--- a/synapse.gemspec
+++ b/synapse.gemspec
@@ -17,7 +17,6 @@ Gem::Specification.new do |gem|
   gem.test_files    = gem.files.grep(%r{^(test|spec|features)/})
 
   gem.add_runtime_dependency "aws-sdk", "~> 1.39"
-  gem.add_runtime_dependency "docker-api", "~> 1.7"
   gem.add_runtime_dependency "zk", "~> 1.9.4"
   gem.add_runtime_dependency "logging", "~> 1.8"
 
